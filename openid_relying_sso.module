<?php

/**
 * @file
 * Hook implementations, callbacks form OpenID SSO.
 */

/**
 * Implementation of hook_menu().
 */
function openid_relying_sso_menu() {
  $items = array();
  // Move log in page to login/direct. See how openid_relying_sso_menu_alter() replaces
  // log in.
  $items['login/direct'] = array(
    'title' => 'Direct log in',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_login'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  $items['sso/init'] = array(
    'page callback' => 'openid_relying_sso_init_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/openid-sso'] = array(
    'title' => 'OpenID Simple Sign-On',
    'description' => 'Configure a designated OpenID provider for simplified OpenID-based sign-on.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_relying_sso_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function openid_relying_sso_menu_alter(&$items) {
  $items['user/register']['page callback'] = 'openid_relying_sso_user_register_page';
  $items['user/password']['page callback'] = 'openid_relying_sso_user_password_page';
  $items['user']['page callback'] = 'openid_relying_sso_user_page';
  $items['logout']['page callback'] = 'openid_relying_sso_logout_page';
}

/**
 * Implementation of hook_form_alter().
 *
 * Redirect user to front page after login, otherwise she will be pushed to OP
 * when using the login/direct form.
 */
function openid_relying_sso_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    // Redirect user to front page after login, otherwise she will be pushed to
    // OP when using the login/direct form.
    case 'user_login':
      $form['#redirect'] = '';
      break;
    // Don't allow the user to login using the login block. Direct her to OP
    // instead.
    case 'user_login_block':
      // Show a modal message when user clicks on log in (there may be a wait).
      $path = drupal_get_path('module', 'openid_relying_sso');
      drupal_add_js(array('openid_relying_sso_wait_message' => t('Please wait...')), 'setting');
      drupal_add_css("$path/openid_relying_sso.css");
      drupal_add_js("$path/jquery.blockUI.js");
      drupal_add_js("$path/openid_relying_sso.js");
      // Remove all child elements.
      foreach (element_children($form) as $key) {
        unset($form[$key]);
      }
      $form['#action'] = url('user');
      $form['#validate'] = array();
      if ($provider = variable_get('openid_relying_sso_provider', array())) {
        $form['message'] = array(
          '#type' => 'item',
          '#value' => t('Login using @provider_name as your OpenID provider.', array('@provider_name' => $provider['name'])),
        );
        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Login'),
          '#submit' => array('openid_relying_sso_user_login_submit'),
          '#attributes' => array('class' => 'login-submit'),
        );
      }
      break;
  }
}

/**
 * Page callback for initiating an authentication request. Logs out user before
 * initiation.
 *
 * This page is requested rather than the user/ page because it makes sure that
 * a user is NOT authenticated when initiating the OpenID authentication
 * request.
 */
function openid_relying_sso_init_page() {
  openid_relying_sso_logout();
  drupal_goto('user');
}

/**
 * Custom menu callback for user/page.
 */
function openid_relying_sso_user_page() {
  global $user;
  if ($user->uid) {
    return user_page();
  }
  return openid_relying_sso_request();
}

/**
 * Custom menu callback for user/register.
 */
function openid_relying_sso_user_register_page() {
  $provider = variable_get('openid_relying_sso_provider', array());
  drupal_goto(url($provider['url'] . 'user/register', array('absolute' => TRUE)));
}

/**
 * Custom menu callback for user/password.
 */
function openid_relying_sso_user_password_page() {
  $provider = variable_get('openid_relying_sso_provider', array());
  drupal_goto(url($provider['url'] . 'user/password', array('absolute' => TRUE)));
}

/**
 * Custom logout callback, redirects to hub.
 */
function openid_relying_sso_logout_page() {
  openid_relying_sso_logout();
  $provider = variable_get('openid_relying_sso_provider', array());
  drupal_goto($provider['url'] .'sso/logout/', 'realm='. urlencode(url(NULL, array('absolute' => TRUE))));
}

/**
 * Settings form.
 */
function openid_relying_sso_settings() {
  $provider = variable_get('openid_relying_sso_provider', array());
  $form = array();
  $form['openid_relying_sso_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('OpenID Provider'),
    '#description' => t('A designated OpenID Provider with Simple Sign-On support. This must be another Drupal site with OpenID Provider module and OpenID Provider SSO module installed and configured.'),
    '#tree' => TRUE,
  );
  $form['openid_relying_sso_provider']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('The site name of the provider.'),
    '#default_value' => $provider['name'],
  );
  $form['openid_relying_sso_provider']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('The full URL of the provider, must contain a trailing slash.'),
    '#default_value' => $provider['url'],
  );
  return system_settings_form($form);
}

/**
 * Request authentication.
 */
function openid_relying_sso_request() {
  $provider = variable_get('openid_relying_sso_provider', array());
  $values = array(
    'openid_identifier' => $provider['url'],
    'openid.return_to' => url('openid/authenticate', array('absolute' => TRUE, 'query' => 'destination=')),
  );
  openid_begin($values['openid_identifier'], $values['openid.return_to'], $values);
}

/**
 * Pillaged from user_logout(). Does not contain drupal_goto().
 */
function openid_relying_sso_logout() {
  global $user;

  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // Destroy the current session:
  session_destroy();
  // Only variables can be passed by reference workaround.
  $null = NULL;
  user_module_invoke('logout', $null, $user);

  // Load the anonymous user
  $user = drupal_anonymous_user();
}
